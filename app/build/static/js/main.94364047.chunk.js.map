{"version":3,"sources":["servo.js","app.js","serviceWorker.js","index.js"],"names":["Servo","props","state","angle","handleChange","bind","handleEmit","undefined","this","socket","emit","id","servo","value","event","setState","target","className","type","min","max","onChange","step","onMouseUp","onKeyDown","React","Component","App","endpoint","servos","servoId","servoAngle","errorMessage","handleInputChange","handleNewServo","checked","name","servoExists","map","push","class","for","onClick","SocketIO","connect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94364047.chunk.js","sourcesContent":["import React from 'react'\nimport './servo'\n\nclass Servo extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tangle: this.props.angle\n\t\t}\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t\tthis.handleEmit = this.handleEmit.bind(this)\n\t}\n\tcomponentDidMount() {\n\t\tif (this.props.socket !== undefined) {\n\t\t\tthis.props.socket.emit('move', { id: this.props.servo, value: this.state.angle })\n\t\t}\n\t}\n\thandleChange(event) {\n\t\tthis.setState({ angle: event.target.value })\n\t}\n\thandleEmit() {\n\t\tif (this.props.socket !== undefined) {\n\t\t\tthis.props.socket.emit('move', { id: this.props.servo, value: this.state.angle })\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"servo-container\">\n\t\t\t\t<h1>Channel {this.props.servo}</h1>\n\t\t\t\t<h3>{this.state.angle}Â°</h3>\n\t\t\t\t<br />\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"180\"\n\t\t\t\t\tvalue={this.state.angle}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\tstep=\"1\"\n\t\t\t\t\tonMouseUp={this.handleEmit}\n\t\t\t\t\tonKeyDown={this.handleEmit}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Servo\n","import React from 'react'\nimport Servo from './servo'\nimport SocketIO from 'socket.io-client'\n\nexport default class App extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\tendpoint: 'http://localhost:8080',\n\t\t\tservos: [{ id: 0, angle: 0 }],\n\t\t\tsocket: undefined,\n\t\t\tservoId: 0,\n\t\t\tservoAngle: 0,\n\t\t\terrorMessage: undefined\n\t\t}\n\n\t\tthis.handleInputChange = this.handleInputChange.bind(this)\n\t\tthis.handleNewServo = this.handleNewServo.bind(this)\n\t}\n\thandleInputChange(event) {\n\t\tconst target = event.target\n\t\tconst value = target.type === 'checkbox' ? target.checked : target.value\n\t\tconst name = target.name\n\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t})\n\t}\n\thandleNewServo() {\n\t\tlet servos = this.state.servos\n\t\tlet servoExists = false\n\n\t\tservos.map((servo) => {\n\t\t\tif (servo.id === this.state.servoId) {\n\t\t\t\tservoExists = true\n\t\t\t}\n\t\t})\n\n\t\tif (servoExists === false) {\n\t\t\tservos.push({ id: this.state.servoId, angle: this.state.servoAngle })\n\n\t\t\tthis.setState({\n\t\t\t\tservos: servos,\n\t\t\t\terrorMessage: undefined\n\t\t\t\t\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\terrorMessage: 'Servo channel is already in use.'\n\t\t\t})\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div class=\"servo-form-container\">\n\t\t\t\t\t<label for=\"servoId\">Channel</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tid=\"servoId\"\n\t\t\t\t\t\tname=\"servoId\"\n\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\tvalue={this.state.servoId}\n\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<label for=\"servoValue\">Initial Angle</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\tid=\"servoAngle\"\n\t\t\t\t\t\tname=\"servoAngle\"\n\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\tmax={180}\n\t\t\t\t\t\tvalue={this.state.servoAngle}\n\t\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={this.handleNewServo}>Add Servo</button>\n\t\t\t\t\t{this.state.errorMessage !== undefined && <p class=\"error-message\">{this.state.errorMessage}</p>}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t{this.state.servos.map((value) => (\n\t\t\t\t\t\t<Servo servo={value.id} angle={value.angle} socket={this.state.socket} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t)\n\t}\n\tcomponentDidMount() {\n\t\tthis.setState({ socket: SocketIO(this.state.endpoint).connect() })\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' }\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.')\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}